type User {
  _id: String!
  name: String
  email: String!
  password: String!
  createdAt: String
  updatedAt: String
  avatar: String
  role: String!
  refreshToken: String
  _individual: Individual
  # _company: Company
}

type Individual {
  name: String
  country: String
}

input CreateUserInput {
  name: String
  email: String!
  password: String!
  avatar: String
  role: String!
  refreshToken: String
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  _id: String!
  name: String
  avatar: String
  role: String
  refreshToken: String
  createdAt: String
  updatedAt: String
}


input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  email: String!
  token: String!
  password: String!
}

type UserPayload {
  _id: String
  name: String
  role: String
  email: String #reject gmail, yahoo, hotmail, icloud
  avatar: String
  _company: String
}


type DeleteUserResponse {
  success: Boolean!
  message: String
}


type SuccessMessage {
  message: String!
}

type UsersPayload {
  users: [UserPayload]!
  count: String!
}

type Query {
  getAuthUser: UserPayload
  users: [User]!
  user(id: ID!): User
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  getUser(_id: String!): User
  getUsers(_id: String!): [User]
  removeUser(_id: String!): DeleteUserResponse
  # businessSignup(input: SignUpInput!): SignUpResponse
  # individualSignup(input: IndividualSignUpInput!): IndividualSignUpResponse
  # signIn(input: SignInInput!): SignInResponse
  # googleSignIn(input: GoogleSignInInput!): GoogleSignInResponse
}
